import matplotlib.pyplot as plt

from SuspensionModel.noise.typeA import photosensor,oplev
from SuspensionModel.noise import seismicnoise

seis_h_99 = seismicnoise(unit='m',percentile='99',axis='hor')
seis_h_90 = seismicnoise(unit='m',percentile='90',axis='hor')
seis_h_01 = seismicnoise(unit='m',percentile='1' ,axis='hor')
seis_h_50 = seismicnoise(unit='m',percentile='50',axis='hor')
seis_h_10 = seismicnoise(unit='m',percentile='10',axis='hor')
seis_v_99 = seismicnoise(unit='m',percentile='99',axis='vert')
seis_v_90 = seismicnoise(unit='m',percentile='90',axis='vert')
seis_v_01 = seismicnoise(unit='m',percentile='1' ,axis='vert')
seis_v_50 = seismicnoise(unit='m',percentile='50',axis='vert')
seis_v_10 = seismicnoise(unit='m',percentile='10',axis='vert')
ps_l = photosensor('L')
ps_t = photosensor('T')
ps_v = photosensor('V')
ps_p = photosensor('P')
ps_y = photosensor('Y')
ps_r = photosensor('R')
oplev_l = oplev('TML')
oplev_p = oplev('TMP')
oplev_y = oplev('TMY')

# Horizontal and Transverse and Vertical
fig,ax = plt.subplots(1,1,figsize=(9,6))
plt.title('Horizontal and Vertical')
ax.plot_mmm(seis_h_50,seis_h_01,seis_h_99,color='k',alpha=0.1,label='hori.')
ax.plot_mmm(seis_h_50,seis_h_10,seis_h_90,color='k')
ax.plot_mmm(seis_v_50,seis_v_01,seis_v_99,color='m',alpha=0.1,label='vert.')
ax.plot_mmm(seis_v_50,seis_v_10,seis_v_90,color='m')
ax.loglog(ps_l,label='IM/MN_PS_L')
ax.loglog(ps_t,label='IM/MN_PS_T')
ax.loglog(ps_v,label='IM/MN_PS_V')
ax.loglog(oplev_l,label='IM/MN/TM_OL_L')
ax.set_ylabel('Displacement [m/rtHz]')
ax.set_ylim(1e-12,1e-5)
ax.set_xlim(1e-2,1e2)    
ax.grid(which='major',linestyle='--')
ax.grid(which='minor',linestyle=':')
ax.legend()    
ax.set_xlabel('Frequency [Hz]')
plt.savefig('sens_noise_payload_HTV.png')
plt.close()       

# Pit and Yaw and Roll
fig,ax = plt.subplots(1,1,figsize=(9,6))
plt.title('Pit and Yaw and Roll')
ax.loglog(ps_p,label='IM/MN_PS_P')
ax.loglog(ps_y,label='IM/MN_PS_Y')
ax.loglog(ps_r,label='IM/MN_PS_R')
ax.loglog(oplev_p,label='IM/MN/TM_OL_P')
ax.loglog(oplev_y,label='IM/MN/TM_OL_Y')
ax.set_ylabel('Angle [rad/rtHz]')
ax.set_ylim(1e-12,1e-5)
ax.set_xlim(1e-2,1e2)    
ax.grid(which='major',linestyle='--')
ax.grid(which='minor',linestyle=':')
ax.legend()    
ax.set_xlabel('Frequency [Hz]')
plt.savefig('sens_noise_payload_PYR.png')
plt.close()       

